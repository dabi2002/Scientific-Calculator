
import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.util.StringTokenizer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Usuario
 */
public class CalculadoraCientifica extends javax.swing.JFrame {

    /**
     * Creates new form CalculadoraCientifica
     */
    public CalculadoraCientifica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        two1 = new javax.swing.JButton();
        two2 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        display = new javax.swing.JTextField();
        equals = new javax.swing.JButton();
        less = new javax.swing.JButton();
        by = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        AC = new javax.swing.JButton();
        three = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        eigth = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        percentage = new javax.swing.JButton();
        rigth_parenthesis = new javax.swing.JButton();
        spot = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        Answer = new javax.swing.JButton();
        elevated = new javax.swing.JButton();
        scientificNotation = new javax.swing.JButton();
        sqrt = new javax.swing.JButton();
        tangente = new javax.swing.JButton();
        pi = new javax.swing.JButton();
        euler = new javax.swing.JButton();
        coseno = new javax.swing.JButton();
        Inv = new javax.swing.JButton();
        left_parenthesis = new javax.swing.JButton();
        factorial = new javax.swing.JButton();
        seno = new javax.swing.JButton();
        logarithmNeper = new javax.swing.JButton();
        logarithmBase10 = new javax.swing.JButton();
        Rad = new javax.swing.JButton();
        Deg = new javax.swing.JButton();
        four = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        plus = new javax.swing.JButton();

        two1.setText("2");
        two1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                two1ActionPerformed(evt);
            }
        });

        two2.setText("2");
        two2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                two2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

        equals.setBackground(new java.awt.Color(204, 255, 204));
        equals.setText("=");
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        less.setText("-");
        less.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lessActionPerformed(evt);
            }
        });

        by.setText("x");
        by.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byActionPerformed(evt);
            }
        });

        divide.setText("/");
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        AC.setText("AC");
        AC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACActionPerformed(evt);
            }
        });

        three.setText("3");
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        one.setText("1");
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        two.setText("2");
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        nine.setText("9");
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        eigth.setText("8");
        eigth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eigthActionPerformed(evt);
            }
        });

        seven.setText("7");
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        percentage.setText("%");
        percentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageActionPerformed(evt);
            }
        });

        rigth_parenthesis.setText(")");
        rigth_parenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rigth_parenthesisActionPerformed(evt);
            }
        });

        spot.setText(".");
        spot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spotActionPerformed(evt);
            }
        });

        zero.setText("0");
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        Answer.setText("ans");
        Answer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnswerActionPerformed(evt);
            }
        });

        elevated.setText("^");
        elevated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elevatedActionPerformed(evt);
            }
        });

        scientificNotation.setText("exp");
        scientificNotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scientificNotationActionPerformed(evt);
            }
        });

        sqrt.setText("√");
        sqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrtActionPerformed(evt);
            }
        });

        tangente.setText("tan");
        tangente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tangenteActionPerformed(evt);
            }
        });

        pi.setText("π");
        pi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piActionPerformed(evt);
            }
        });

        euler.setText("e");
        euler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eulerActionPerformed(evt);
            }
        });

        coseno.setText("cos");
        coseno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosenoActionPerformed(evt);
            }
        });

        Inv.setText("Inv");
        Inv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvActionPerformed(evt);
            }
        });

        left_parenthesis.setText("(");
        left_parenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                left_parenthesisActionPerformed(evt);
            }
        });

        factorial.setText("x!");
        factorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factorialActionPerformed(evt);
            }
        });

        seno.setText("sen");
        seno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senoActionPerformed(evt);
            }
        });

        logarithmNeper.setText("ln");
        logarithmNeper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logarithmNeperActionPerformed(evt);
            }
        });

        logarithmBase10.setText("log");
        logarithmBase10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logarithmBase10ActionPerformed(evt);
            }
        });

        Rad.setBackground(new java.awt.Color(204, 204, 255));
        Rad.setText("Rad");
        Rad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Rad.setMargin(new java.awt.Insets(2, 0, 3, 0));
        Rad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadActionPerformed(evt);
            }
        });

        Deg.setBackground(new java.awt.Color(204, 204, 255));
        Deg.setText("Deg");
        Deg.setHideActionText(true);
        Deg.setMargin(new java.awt.Insets(2, 0, 3, 0));
        Deg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DegActionPerformed(evt);
            }
        });

        four.setText("4");
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        five.setText("5");
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        six.setText("6");
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(display)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(Answer, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(scientificNotation, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(euler, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                                            .addComponent(pi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(coseno, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tangente, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(logarithmBase10, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(elevated, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Inv, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seno, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logarithmNeper, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(seven, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .addComponent(one, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(four, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eigth, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .addComponent(two, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(five, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(equals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(three, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nine, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .addComponent(six, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Rad, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Deg, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(factorial, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(left_parenthesis, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rigth_parenthesis, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(percentage, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(divide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AC, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(by, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(less, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(plus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Deg, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(factorial)
                    .addComponent(left_parenthesis, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rigth_parenthesis)
                    .addComponent(percentage)
                    .addComponent(AC)
                    .addComponent(Rad, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(divide)
                    .addComponent(nine)
                    .addComponent(eigth)
                    .addComponent(seven)
                    .addComponent(Inv)
                    .addComponent(seno)
                    .addComponent(logarithmNeper))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(by)
                    .addComponent(pi)
                    .addComponent(coseno)
                    .addComponent(logarithmBase10)
                    .addComponent(five)
                    .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(six))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(less)
                    .addComponent(three)
                    .addComponent(one)
                    .addComponent(two)
                    .addComponent(sqrt)
                    .addComponent(tangente)
                    .addComponent(euler))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(equals)
                    .addComponent(spot)
                    .addComponent(zero)
                    .addComponent(Answer)
                    .addComponent(elevated)
                    .addComponent(scientificNotation)
                    .addComponent(plus))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        // TODO add your handling code here:
        String expression = display.getText();  // Obtener la expresión del display
    try {
        // Convertir a notación postfija usando Shunting Yard
        ArrayList<String> postFix = toPostfix(expression);
        
        // Evaluar la expresión postfija
        double result = evaluatePostfix(postFix);
        
        // Mostrar el resultado en el display
        display.setText(String.valueOf(result));
    } catch (Exception e) {
        // Manejo de errores si la expresión es inválida
        display.setText("Error");
        System.out.println(e);
    }//GEN-LAST:event_equalsActionPerformed
    }
    
    private void lessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lessActionPerformed
        // TODO add your handling code here:
        display.setText(display.getText()+"-");
    }//GEN-LAST:event_lessActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        // TODO add your handling code here:
        display.setText(display.getText()+"/");
    }//GEN-LAST:event_divideActionPerformed

    private void ACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACActionPerformed
        // TODO add your handling code here:
        //display.remove;
         display.setText("");
    }//GEN-LAST:event_ACActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        // TODO add your handling code here:
        display.setText(display.getText()+"3");
    }//GEN-LAST:event_threeActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        // TODO add your handling code here:
        display.setText(display.getText()+"1");
    }//GEN-LAST:event_oneActionPerformed

    private void two1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_two1ActionPerformed
        // TODO add your handling code here:
        display.setText(display.getText()+"2");
    }//GEN-LAST:event_two1ActionPerformed

    private void two2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_two2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_two2ActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"2");
    }//GEN-LAST:event_twoActionPerformed

    private void cosenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosenoActionPerformed
    String expression = display.getText();
    // Obtener el último carácter
    String character = expression.isEmpty() ? " " : String.valueOf(expression.charAt(expression.length() - 1));
    
    // Comprobar si está vacío o si el último carácter es un operador
    if (expression.isEmpty() || isOperator(character)) {
        expression += "cos(";
    } else {
        expression += "*cos(";
    }

    display.setText(expression);     
    }//GEN-LAST:event_cosenoActionPerformed

    private void percentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"%");
    }//GEN-LAST:event_percentageActionPerformed

    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"4");
    }//GEN-LAST:event_fourActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"5");
    }//GEN-LAST:event_fiveActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"6");
    }//GEN-LAST:event_sixActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"+");
    }//GEN-LAST:event_plusActionPerformed

    private void byActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"*");
    }//GEN-LAST:event_byActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"9");
    }//GEN-LAST:event_nineActionPerformed

    private void rigth_parenthesisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rigth_parenthesisActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+")");
    }//GEN-LAST:event_rigth_parenthesisActionPerformed

    private void eigthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eigthActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"8");
    }//GEN-LAST:event_eigthActionPerformed

    private void spotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spotActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+".");
    }//GEN-LAST:event_spotActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"0");
    }//GEN-LAST:event_zeroActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"7");
    }//GEN-LAST:event_sevenActionPerformed

    private void left_parenthesisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_left_parenthesisActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"(");
    }//GEN-LAST:event_left_parenthesisActionPerformed

    private void elevatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elevatedActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"^");
    }//GEN-LAST:event_elevatedActionPerformed

    private void sqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqrtActionPerformed
        // TODO add your handling code here:
   String expression = display.getText();
    // Obtener el último carácter
    String character = expression.isEmpty() ? " " : String.valueOf(expression.charAt(expression.length() - 1));
    
    // Comprobar si está vacío o si el último carácter es un operador
    if (expression.isEmpty() || isOperator(character)) {
        expression += "sqrt(";
    } else {
        expression += "*sqrt(";
    }

    display.setText(expression);
    }//GEN-LAST:event_sqrtActionPerformed

    private void logarithmBase10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logarithmBase10ActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"log(");
    }//GEN-LAST:event_logarithmBase10ActionPerformed

    private void logarithmNeperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logarithmNeperActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"ln(");
    }//GEN-LAST:event_logarithmNeperActionPerformed

    private void factorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factorialActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_factorialActionPerformed

    private void scientificNotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scientificNotationActionPerformed
        // TODO add your handling code here:
         display.setText(display.getText()+"EXP(");
    }//GEN-LAST:event_scientificNotationActionPerformed

    private void tangenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tangenteActionPerformed
        // TODO add your handling code here:
    String expression = display.getText();
    // Obtener el último carácter
    String character = expression.isEmpty() ? " " : String.valueOf(expression.charAt(expression.length() - 1));
    
    // Comprobar si está vacío o si el último carácter es un operador
    if (expression.isEmpty() || isOperator(character)) {
        expression += "tan(";
    } else {
        expression += "*tan(";
    }

    display.setText(expression);
    }//GEN-LAST:event_tangenteActionPerformed

    private void senoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senoActionPerformed
   String expression = display.getText();
    // Obtener el último carácter
    String character = expression.isEmpty() ? " " : String.valueOf(expression.charAt(expression.length() - 1));
    
    // Comprobar si está vacío o si el último carácter es un operador
    if (expression.isEmpty() || isOperator(character)) {
        expression += "sin(";
    } else {
        expression += "*sin(";
    }

    display.setText(expression);
    }//GEN-LAST:event_senoActionPerformed

    private void DegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DegActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DegActionPerformed

    private void RadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadActionPerformed

    private void InvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvActionPerformed
        // TODO add your handling code here:
        display.setText(display.getText()+"Inv(");
    }//GEN-LAST:event_InvActionPerformed

    private void piActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piActionPerformed
        // TODO add your handling code here:
    String expression = display.getText();
    // Obtener el último carácter
    String character = expression.isEmpty() ? " " : String.valueOf(expression.charAt(expression.length() - 1));
    
    // Comprobar si está vacío o si el último carácter es un operador
    if (expression.isEmpty() || isOperator(character)) {
        expression += "*";
    }
    expression += Math.PI; // Puedes usar "Math.PI" directamente
    display.setText(expression);
    }//GEN-LAST:event_piActionPerformed

    private void eulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eulerActionPerformed
    String expression = display.getText();
    // Obtener el último carácter
    String character = expression.isEmpty() ? " " : String.valueOf(expression.charAt(expression.length() - 1));
    
    // Comprobar si está vacío o si el último carácter es un operador
    if (expression.isEmpty() || isOperator(character)) {
        expression += "*";
    }
    expression += Math.E; // Puedes usar "Math.E" directamente
    display.setText(expression);
    }//GEN-LAST:event_eulerActionPerformed

    private void AnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnswerActionPerformed
        // TODO add your handling code here:
        display.setText(display.getText()+"Ans(");

    }//GEN-LAST:event_AnswerActionPerformed

    
    
        // Método para agregar texto al display cuando se presionan botones
    private void appendToDisplay(String text) {
        display.setText(display.getText() + text);
    }
    
    
    // Método para convertir infijo a postfijo usando Shunting Yard
    private ArrayList<String> toPostfix(String expression) {
        Stack<String> operators = new Stack<>();
        ArrayList<String> output = new ArrayList<>();
        StringTokenizer tokenizer = new StringTokenizer(expression, "+-*/^() ", true);

        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken().trim();
            if (token.isEmpty()) continue; // Ignorar tokens vacíos

            if (isNumber(token)) {
                output.add(token); // Agregar números directamente al resultado
                System.out.println("New number: " + token);
                System.out.println("Push number: " + token);
                System.out.println("Numbers are now: " + output);
            } else if (isOperator(token)) {
                while (!operators.isEmpty() && getPrecedence(operators.peek()) >= getPrecedence(token)) {
                    System.out.println("New operator: " + token); 
                    System.out.println("Pop operator: " + operators.peek());  // Debug
                    output.add(operators.pop());
                    System.out.println("Operators are now: " + operators);
                }
                System.out.println("New operator: " + token); 
                System.out.println("Push operator: " + token);  // Debug
                operators.push(token);
                System.out.println("Operators are now: " + operators);
            } else if (token.equals("(")) {
                System.out.println("New operator: " + token); 
                System.out.println("Push operator: " + token);
                operators.push(token);
                System.out.println("Operators are now: " + operators);
            } else if (token.equals(")")) {
                while (!operators.isEmpty() && !operators.peek().equals("(")) {
                    System.out.println("New operator: " + token); 
                    System.out.println("Pop operator inside parentheses: " + operators.peek());  // Debug
                    output.add(operators.pop());
                }           
                
                operators.pop();  // Pop the '(' from the stack
                    if (!operators.isEmpty() && isFunction(operators.peek())) {
                            output.add(operators.pop());
                        }
            } else if (isFunction(token)) {
                System.out.println("New operator: " + token); 
                System.out.println("Push operator: " + token);
                operators.push(token);
            } 
            else if (isConstant(token)) {
                if (token.equals("pi")) {
                output.add(String.valueOf(Math.PI));  // Agrega el valor numérico de pi
                } else if (token.equals("e")) {
                  output.add(String.valueOf(Math.E));   // Agrega el valor numérico de Euler si corresponde
                }
            }
            else {
                System.out.println("Unexpected token: " + token);  // Error case
            }

            System.out.println("Operators are now: " + operators);
        }

        // Vaciar la pila de operadores al final
        while (!operators.isEmpty()) {
            System.out.println("End of expression - pop operator: " + operators.peek());  // Debug
            output.add(operators.pop());
        }
        return output;
    }

private boolean isFunction(String token) {
    return token.equals("sin") || token.equals("cos") || token.equals("tan") || token.equals("sqrt") || token.equals("factorial");
}

private boolean isConstant(String token) {
    return token.equals("pi") || token.equals("e"); 
}


        // Método para evaluar la expresión postfija
private double evaluatePostfix(ArrayList<String> tokens) {
    Stack<Double> stack = new Stack<>();

    for (String token : tokens) {
        if (isNumber(token)) {
            stack.push(Double.parseDouble(token));
        } else if (isFunction(token)) {
            double value = stack.pop();
            switch (token) {
                case "sin":
                    stack.push(Math.sin(Math.toRadians(value))); // Convertir a radianes
                    break;
                case "cos":
                    stack.push(Math.cos(Math.toRadians(value))); // Convertir a radianes
                    break;
                case "tan":
                    stack.push(Math.tan(Math.toRadians(value))); // Convertir a radianes
                    break;
                case "sqrt":
                    stack.push(Math.sqrt(value));
                    break;
                case "factorial":
                    stack.push((double) factorial((int) value));
                    break;
                default:
                    throw new IllegalArgumentException("Function not recognized: " + token);
            }
        } else if (isOperator(token)) {
            double b = stack.pop();
            double a = stack.pop();
            switch (token) {
                case "+":
                    stack.push(a + b);
                    break;
                case "-":
                    stack.push(a - b);
                    break;
                case "*":
                    stack.push(a * b);
                    break;
                case "/":
                    stack.push(a / b);
                    break;
                case "^":
                    stack.push(Math.pow(a, b));
                    break;
                default:
                    break;
            }
        }
    }

    return stack.pop();
}

    
        // Método para aplicar operadores básicos
    private double applyOperator(double a, double b, String operator) {
        switch (operator) {
            case "+": return a + b;
            case "-": return a - b;
            case "*": return a * b;
            case "/": return a / b;
            case "^": return Math.pow(a, b);
            default: throw new IllegalArgumentException("Operador desconocido: " + operator);
        }
    }

    // Método para realizar el cálculo cuando se presiona el botón "="
    private void calculateResult() {
    //Realiza el cálculo de la expresión matemática completa mostrada en el campo de visualización.
    String expression = display.getText();
    ArrayList<String> postfix = toPostfix(expression);
    
    //Convierte la expresión en notación postfija y evalúa el resultado.
    double result = evaluatePostfix(postfix);
    display.setText(String.valueOf(result));
    }
       
    private int factorial(int n) {
    if (n < 0) {
        throw new IllegalArgumentException("El factorial no está definido para números negativos.");
    }
    int result = 1;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

    // Métodos auxiliares para Shunting Yard
    // Evalua si el valor que entra en token es un numero
    private boolean isNumber(String token) {
        try {
            Double.parseDouble(token);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    // Evalua si el valor que entra en token es un operador
    private boolean isOperator(String token) {
    return token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/") || token.equals("^");
    }
    //  Permite extraer el ultimo valor de operators para reglas de superioridad de signos
    private int getPrecedence(String token) {
        switch (token) {
            case "+":case "-":
                return 1;
            case "*":case "/":
                return 2;
            case "^": // potencia
                return 3;
            case "sin": case "cos": case "tan": case "sqrt": case "factorial": 
            return 4; // Mayor precedencia
        default:
            return 0;
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculadoraCientifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculadoraCientifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculadoraCientifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculadoraCientifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculadoraCientifica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AC;
    private javax.swing.JButton Answer;
    private javax.swing.JButton Deg;
    private javax.swing.JButton Inv;
    private javax.swing.JButton Rad;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton by;
    private javax.swing.JButton coseno;
    private javax.swing.JTextField display;
    private javax.swing.JButton divide;
    private javax.swing.JButton eigth;
    private javax.swing.JButton elevated;
    private javax.swing.JButton equals;
    private javax.swing.JButton euler;
    private javax.swing.JButton factorial;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton left_parenthesis;
    private javax.swing.JButton less;
    private javax.swing.JButton logarithmBase10;
    private javax.swing.JButton logarithmNeper;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton percentage;
    private javax.swing.JButton pi;
    private javax.swing.JButton plus;
    private javax.swing.JButton rigth_parenthesis;
    private javax.swing.JButton scientificNotation;
    private javax.swing.JButton seno;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JButton spot;
    private javax.swing.JButton sqrt;
    private javax.swing.JButton tangente;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton two1;
    private javax.swing.JButton two2;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
}
